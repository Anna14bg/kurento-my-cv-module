/* Autogenerated with kurento-module-creator */

#ifndef __MY_CV_MODULE_OPENCV_IMPL_HPP__
#define __MY_CV_MODULE_OPENCV_IMPL_HPP__

#include <OpenCVProcess.hpp>
#include "MyCvModule.hpp"
#include <EventHandler.hpp>
#include <ctime>
#include <iostream>
#include <boost/asio/io_service.hpp>
#include <boost/bind.hpp>
#include <boost/thread/thread.hpp>
#include <boost/atomic.hpp>
#include <opencv2/core/mat.hpp>
#include <boost/thread/mutex.hpp>
#include <boost/interprocess/sync/scoped_lock.hpp>
#include <boost/filesystem.hpp>
#include <chrono>

#include <gst/gst.h>
#include <KurentoException.hpp>
#include <vector>
#include <string>

#define FGFMT_JPEG  0x0
#define FG_JPEG_QUALITY 20


namespace kurento
{
namespace module
{
namespace mycvmodule
{

class MyCvModuleOpenCVImpl : public virtual OpenCVProcess
{

public:

  MyCvModuleOpenCVImpl ();

  virtual ~MyCvModuleOpenCVImpl() = default;

  virtual void process (cv::Mat &mat);

private:

  std::string getCurrentTimestampString();

  int64 getCurrentTimestampLong();

  std::string storagePathSubdir;

  boost::atomic<int> framesCounter;

  int snapInterval;

  boost::atomic<int64> lastQueueTimeStamp;

  std::string storagePath;
};

} /* mycvmodule */
} /* module */
} /* kurento */

#endif /*  __MY_CV_MODULE_OPENCV_IMPL_HPP__ */
